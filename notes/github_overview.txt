#############################################
######     GITHUB OVERVIEW		#####
#############################################

https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F#what_is_git_section

VCS: Version control systems are a category of software tools that helps record changes to files by keeping a track of modifications done to the code. Use of Version Control System: A repository: It can be thought as a database of changes. It contains all the edits and historical versions (snapshots) of the project.


The major difference between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data. 

Other systems: store information as a list of file-based changes; think of the information they store as a set of files and the changes made to each file over time.

Git thinks of its data more like a series of snapshots of a miniature filesystem. Every commit, or save the state of your project, Git basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. 
To be efficient, if files have not changed, Git doesn’t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a stream of snapshots.

Nearly Every Operation Is Local

Everything in Git is checksummed before it is stored and is then referred to by that checksum. This means it’s impossible to change the contents of any file or directory without Git knowing about it. 

The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters (0–9 and a–f) and calculated based on the contents of a file or directory structure in Git. 
Git stores everything in its database not by file name but by the hash value of its contents.

core concepts
----------------
* 3 states/sections
	- (modified) Working directory (tree): changed but not committed
	- (staged) Staging area; git index: pre-commit holding area. you have marked a modified file in its current version to go into your next commit snapshot.
	- (committed) Repository: the data is safely stored in your local database

working tree:  is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify.

staging area: is a file, generally contained in your Git directory, that stores information about what will go into your next commit. Its technical name in Git parlance is the “index”

Git directory: is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you clone a repository from another computer.

The basic Git workflow goes something like this:

	1. You modify files in your working tree.

	2. You selectively stage just those changes you want to be part of your next commit, which adds only those changes to the staging area.

	3. You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory.


Branching
---------------

https://git-scm.com/book/en/v2/Git-Branching-Branches-in-a-Nutshell

Branching means you diverge from the main line of development and continue to do work without messing with that main line.

Example 3 files: (see diagram)

1. 3 x files in WD that have been modified
2. Stage (git add) the files: git computes checksum for each (hash), stores that version (blobs) in the git repository, and adds that checksum to the staging area
3. create commit (git commit): git checksums each subdirectory and stores them as a tree object in the git repository
4. the git repository now contains 5 objects: 3 blobs, 1 tree, 1 commit
 	-blob: each representing the contents of one of the three files
	-tree: lists the contents of the directory; specifies which file names are stored as which blobs
	-commit: with the pointer to that root tree and all the commit metadata


A branch in Git is simply a lightweight movable pointer to one of these commits. The default branch name in Git is master. As you start making commits, you’re given a master branch that points to the last commit you made. Every time you commit, the master branch pointer moves forward automatically.


Creating a New Branch
What happens when you create a new branch? Well, doing so creates a new pointer for you to move around. Let’s say you want to create a new branch called testing. You do this with the git branch command:
$ git branch testing
How does Git know what branch you’re currently on? It keeps a special pointer called HEAD. 

In this case, you’re still on master. The git branch command only created a new branch — it didn’t switch to that branch.

$ git log --oneline --decorate # to view

Switching Branches
To switch to an existing branch, you run the git checkout command. Let’s switch to the new testing branch:

$ git checkout testing
This moves HEAD to point to the testing branch.
If you do a commit, the HEAD branch moves forword with the testing branch; master stays at the previous commit

You can also see this easily with the git log command. If you run git log --oneline --decorate --graph --all it will print out the history of your commits, showing where your branch pointers are and how your history has diverged.

$ git log --oneline --decorate --graph --all



creating a new branch and switching to it at the same time
It’s typical to create a new branch and want to switch to that new branch at the same time — this can be done in one operation with: 
$ git checkout -b <newbranchname>.



Understanding how "checkout" works
------------------------------------
With the "git checkout" command, you determine which revision of your project you want to work on. Git then places all of that revision's files in your working copy folder.

Normally, you use a branch name to communicate with "git checkout":

$ git checkout development
However, you can also provide the SHA1 hash of a specific commit instead:

$ git checkout 56a4e5c08
Note: checking out '56a4e5c08'.

You are in 'detached HEAD' state...
This exact state - when a specific commit is checked out instead of a branch - is what's called a "detached HEAD".


The HEAD pointer in Git determines your current working revision (and thereby the files that are placed in your project's working directory). Normally, when checking out a proper branch name, Git automatically moves the HEAD pointer along when you create a new commit. You are automatically on the newest commit of the chosen branch.

When you instead choose to check out a commit hash, Git won't do this for you. The consequence is that when you make changes and commit them, these changes do NOT belong to any branch.















