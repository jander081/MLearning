###########################################################################
## 				COMMAND LINE				##
###########################################################################


Anywhere on the Mac desktop, hit Command+Shift+G, then type / and hit return to jump to root (Macintosh HD)

In Finder, open up your Macintosh HD folder. Press Command+Shift+Dot.





CMDS
*************************************

$ kill process
-----------------------------
top
kill -9 PID
killall Skype

$ netstat -a | grep 5000
'pick the correct PID'

ps aux | grep python #better!


$ pip freeze   pip show <mod>

$ file <file>: gives info

$ clear: clear terminal

$ open <file>

$ touch: create file
---------------------
touch <file>.ext

$ touch 2.txt 3.txt b.txt etc: create multiple files

Change edit time: may need to sort 

$ rls -

$ mkdir <folder> <folder>

% rmdir # only works if empty
% rm -rf <name>

Rename = move
$ mv <oldfile> <newname>

To actually move
$ mv <file> <folder>/

$ mv <folder>/<file> .     Notice the period; this moves file back to cwd

$ cp <file> <filename>

$ cat
------------------------
Can concatenate

$ cat <file> <fileb>
Returns outputs concatenated

$ cp <file> <folder>/ 

$ rm <folder>/<file>

$ less <file>
---------------------------
If you want to read through a large text file it is better to use the less command over an editor as it doesn't load the entire thing into memory. It loads each page into memory a page at a time making it more efficient.

The less command can also be used with output piped through another command.

For example:
$ ps -ef | less

The above command will show a list of running processes one page at a time.
You can press either the space bar or the "f" key to scroll forward.
'q' for quit


"Pipe in"
----------------------------------------
Use output as input for next command

Example: 
$ ls <folder>/ | less

1. Takes output list and puts it in a temporary file
2. The contents of the temp file are then given to the less command

Long way--
$ ls <folder>/ > tempoutput.txt
$ less tempoutput.txt

Can do multiple pipes

$ ls <folder>/ | tail -3 | less
$ ls <folder>/ | tail -3 | sort > newfile.txt



find CMD
------------------------

$ find <file>

$ find <folder>/ -name <filename> (or *.txt)

-type file
-type d


Grep
-------------------------
Search inside a file
Case sensitive unless add -I

$ grep -i  <txt> <file>

$ ls | grep <txt>

-v everything except

$ ls | grep -v <txt>


AWK CMD
--------------------------
Useful for table-like files

$ awk '{print }' <file>

For 1st and 2nd column

$ awk '{print $1, $2}' <file>   If you leave out ',' it will concat

$ awk '{print $(NF-1}' <file>     2nd to last col


Get 2nd row;
$ awk 'NR==2 {print $0}' <file> 

$ awk 'NR==2,NR==5 {print $0}' <file> 

$ awk 'NR==2;NR==5 {print $0}' <file> 

Can add in a fields option (-F) with a separator. Useful if a csv or something

$ awk -F ";" '{print $1}' <file>




Redirect CMD
---------------------------
Redirects cmd outputs

$ echo "hello" > newfile.txt

This will replace the existing contents

To append use >>

$ echo "add hello" >> existingfile.txt

$ ls -l . >> new text.txt

$ cat <filea> <fileb> >> newfile.txt



Assigning value -> use $
-------------------------------------------------

# Be very carful; to update the $PATH 
% sudo nano /etc/paths 

# IF YOU UNSET #PATH, ALL OSX CMD LINE FUNC STOP WORKING



$ myvar=576

$ echo "$myvar"
$ echo "the value of my variable is $myvar"

Warning: spaces cause errors!

$ unset myvar

Also
$ var='hello'
$ echo ${var}
This helps to distinguish the var from other characters

***Assign variable to command

$ mycommand=ls
$ echo $mycommand
ls
$ $mycommand
file.txt myscipt.sh

***Environment variables

$ echo $USER
$ echo $HOME
$ echo $PATH

PATH: list of dir that your sys looks for exectuable files



$ = EXPANSION OPERATOR
---------------------------------------------------------
$(COMMAND) = command substitution
can also use ``. not recommended. Just be aware in case you encounter it.

Assign the output of a command to a var. Useful if you want to use the PATH inside
another folder

$ d=$(ls)
This will ex ls and assign it to var d

Use this to copy PATHs easily

$ s=$(pwd)

$ cp <file> $s

This is huge

$ read myvalue  -> asked to write something

$ read myvalue
blah blah blah

$ echo $myvalue
blah blah blah

Use -p

$ read -p "type your age" age
type your age <enter text>

$ echo $age
<entered text>

$ echo "you are $age"

Use -s

$ read -s password
<enter unseen password>
$ echo $password

$ read -sp "insert password: " mypass
insert password <hi>

$ echo $mypass
hi

ENVIRONMENT VARIABLES
**************************

a dynamic-named value that can affect the way running processes will behave on a computer. They are part of the environment in which a process runs.

$ echo $USER
$ echo $PATH
$ echo $HOME







Sudo
****************************
Lets you act as a root/super user and override permissions
It will show up as owned by root

If you don't want to use sudo. 

$ sudo bash
$ whoami : root

$ exit

Can also change ownership

$ sudo chown <new owne> <file to change ownership>

can then edit with nano/vim

$ sudo chgrp <name> <file>



Current permissions in home directory: drwxr-xr-x+ 91 jacob  staff  2912 Apr  5 18:27 .

Change permissions

$ chmod <u: owner, g: guest, o: others>=wrx <file>

$ chmod u=rw <file>

This is needed for making files executable

$ chmod +x <file>
just makes file executable for everyone

$ chmod -x <file>
permission removed


Change recursively

sudo chmod -R jacob <folder>/
$ rm -R <folder>/




Wildcard
****************************

'.' To open/list/whatever pwd


'*' $ file *.ext.   or <text>*

Example: $ mv <folder>/*.ext .
Moves all indicated files in '.' to folder




Options
**************************************

ls -l -a
------------------------
-a invisible (.) in front

ls -R .

-l more details
-l <dir>
$ ls -r  lists in reverse order


-R recursively
--------------------------------
$ cp -R <folderA>/ <folderB>.  Allows you to cp all the files in A into B

$ rm -R <folder>/

mv cmd doesn't need -R



-rwxr-xr-x@  1 jacob  staff  1503 Aug 24  2017 LICENSE
-rwxr-xr-x@  1 jacob  staff  3145 Aug 24  2017 README.md
drwxr-xr-x@ 15 jacob  staff   480 Jun 10 21:20 course
drwxr-xr-x@ 18 jacob  staff   576 Aug 24  2017 data


Code #links owner group size date file/dir


drwxr-xr-x@ 
File (-) or dir (dr) --> groups of three: rwx  r-x  r-x   final char unimportant

owner: rwx -> owner can read, write, execute
Group: r-x -> group can read, ex
Everyone else: r-x -> group can read, ex



SHELL SCRIPTING
---------------------------------------------

$ ./<executable file>

./ is the location, NOT a cmd; the "." is the current location
could use the complete path with the executable and it will run


$ which ls

gives location of executable 





STORAGE 
--------------------------------------

$ df

$ df -h

The -h flag is for ‘human readable form’ meaning return results in the familiar megabyte/gigabyte format. You should see something like this

$ du
du – displays disk usage information for each file and directory (ie: home directories, folders, etc)
At the command prompt type:
du -sh ~

The -s flag is for a summary, and once again the -h flag is for ‘human readable form’, the ~ is your home directory. You should see something like this:
$ du -sh ~
26G /Users/MacUser

$ du -sh *

This gives a break down for the current directory

devfs is a special filesystem containing a representation of physical devices. ... In effect the tools will show the file system space and inode usage as 100%.

